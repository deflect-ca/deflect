system_root_zone: example.com
login_user: deflect
server_env: staging  # or production
debug:
  log_level: 'INFO'  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  docker_build_log: False  # only for edges
  orchestration_log: deflect-orch.log  # to project root
dnets:
  - dnet_a
  - controller
controller:
  hostname: controller.example.com
  ip: 1.2.3.4
  dnet: controller
edges:
  - hostname: edge-1.example.com
    ip: 2.3.4.5
    dnet: dnet_a
    user: deflect
logging:
  mode: 'elk_internal'
  filebeat_log_level: 'warning'
  elk_internal: ~
    # stand up built in ELK, no settings required
  elk_external:
    # connect to an external ELK via filebeat
    elasticsearch_host: https://127.0.0.1:9200
    kibana_host: https://127.0.0.1:5601
    elasticsearch_password: password
  logstash_external:
    # connect to an external ELK via legacy-filebeat
    logstash_host: logstash.example.com
fetch_site_yml:
  ssh:
    host: host
    port: 22
    user: user
  scp_src: /path/to/site.yml
  scp_dst: input/config/clients.yml-revisions
  tls_src: /path/to/tls_bundles
  tls_dst: input/config/tls_bundles
dns:
  also-notify: 8.8.8.8; 8.8.4.4;
  allow-query: any;
  allow-transfer: 8.8.8.8; 8.8.4.4;
  default_ns:  # the default NS record for each domain
    - ns1.example.com
    - ns2.example.com
  soa_nameserver: dns0.example.com.  # The nameserver to write to SOA records
  soa_mailbox: zone.example.com.
root_zone_extra:  # extra records for system root zone
  'subdomain':
    - type: A
      value: 8.8.8.8
certs:
  staging_certbot_options: --email user@example.com --server https://127.0.0.1:14000/dir --no-verify-ssl
  production_certbot_options: --email user@example.com --server https://acme-v02.api.letsencrypt.org/directory
  # do not set OU, CN here, no trailing / required
  self_sign_subj: /C=CA/ST=QC/L=Montreal/O=Company
  renew_if_expire_in_days: 7
doh_private_port: 8085
kibana_private_port: 5601
nginx:
  # SSL cipher for for each site
  ssl_ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA"
  # IPs to allow nginx purge cache
  allow_purge:
    - ip: 172.17.0.0/24
      comment: Docker network
  # IPs to allow info/decision_lists/rate_limit_states
  allow_banjax_info:
    - ip: 172.17.0.0/24
      comment: Docker network
  # IPs to allow info/stub_status
  allow_stub_status:
    - ip: 172.17.0.0/24
      comment: Docker network
  # Server header settings
  header_srv_custom: True # Set False to show 'Server: nginx/1.17'
  header_srv_custom_str: Deflect (nginx)
  header_show_time: False
  # print nginx default access.log
  default_access_log: True
  # reverse proxy to banjax
  banjax_keepalive: 128
  banjax_proxy_read_timeout: 30
  banjax_proxy_connect_timeout: 30
  # The hash bucket size parameter is aligned to the size
  # that is a multiple of the processor’s cache line size.
  # This speeds up key search in a hash on modern processors
  # by reducing the number of memory accesses.
  # If hash bucket size is equal to one processor’s cache
  # line size then the number of memory accesses during the
  # key search will be two in the worst case — first to compute
  # the bucket address, and second during the key search inside
  # the bucket.
  # Therefore, if nginx emits the message requesting to increase
  # either hash max size or hash bucket size then the first parameter
  # should first be increased.
  server_names_hash_max_size: 1024
  server_names_hash_bucket_size: 64
  worker_connections: 4096
  # increase proxy_buffers to 8 256k, proxy_buffer_size to 128k and proxy_busy_buffers_size to 256k
  # setting to false will make it default
  increase_proxy_buffer_size: true

# Data volumes and paths where the prometheus metrics are stored.
prometheus_data:
  # The path where the data is accesible on the host, it can be a docker volume
  # name, e.g. prometheus-data or a full path in the host, e.g.:
  # /var/log/prometheus
  # If you chose to use a volume name the data will be accessible at:
  # /var/lib/docker/volumes/{your_volume_name}
  host_path: prometheus-data
  # This path is used to mount the docker volume inside of the container the same
  # docker volume is shared between deflect containers but each service should
  # write only in its own file, e.g /var/log/prometheus/edgemanage.prom
  container_path: /var/log/prometheus/
